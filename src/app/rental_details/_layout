const InitialLayout = () => {
  const [loaded, error] = useFonts({
    SpaceMono: require('../assets/fonts/SpaceMono-Regular.ttf'),
    ...FontAwesome.font,
  });
  const router = useRouter();
  const { isLoaded, isSignedIn } = useAuth();
  const segments = useSegments();

  // Expo Router uses Error Boundaries to catch errors in the navigation tree.
  useEffect(() => {
    if (error) throw error;
  }, [error]);

  useEffect(() => {
    if (loaded) {
      SplashScreen.hideAsync();
    }
  }, [loaded]);

  useEffect(() => {
    if (!isLoaded) return;

    const inAuthGroup = segments[0] === '(authenticated)';

    if (isSignedIn && !inAuthGroup) {
      router.replace('/(authenticated)/(tabs)/home');
    } else if (!isSignedIn) {
      router.replace('/');
    }
  }, [isSignedIn]);

  if (!loaded || !isLoaded) {
    return (
      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
        <ActivityIndicator size="large" color={Colors.primary} />
      </View>
    );
  }

  return (
    <Stack>
      <Stack.Screen name="index" options={{ headerShown: false }} />
      <Stack.Screen
        name="signup"
        options={{
          title: '',
          headerBackTitle: '',
          headerShadowVisible: false,
          headerStyle: { backgroundColor: Colors.background },
          headerLeft: () => (
            <TouchableOpacity onPress={router.back}>
              <Ionicons name="arrow-back" size={34} color={Colors.dark} />
            </TouchableOpacity>
          ),
        }}
      />

      <Stack.Screen
        name="login"
        options={{
          title: '',
          headerBackTitle: '',
          headerShadowVisible: false,
          headerStyle: { backgroundColor: Colors.background },
          headerLeft: () => (
            <TouchableOpacity onPress={router.back}>
              <Ionicons name="arrow-back" size={34} color={Colors.dark} />
            </TouchableOpacity>
          ),
          headerRight: () => (
            <Link href={'/help'} asChild>
              <TouchableOpacity>
                <Ionicons name="help-circle-outline" size={34} color={Colors.dark} />
              </TouchableOpacity>
            </Link>
          ),
        }}
      />

      <Stack.Screen name="help" options={{ title: 'Help', presentation: 'modal' }} />

      <Stack.Screen
        name="verify/[phone]"
        options={{
          title: '',
          headerBackTitle: '',
          headerShadowVisible: false,
          headerStyle: { backgroundColor: Colors.background },
          headerLeft: () => (
            <TouchableOpacity onPress={router.back}>
              <Ionicons name="arrow-back" size={34} color={Colors.dark} />
            </TouchableOpacity>
          ),
        }}
      />
      <Stack.Screen name="(authenticated)/(tabs)" options={{ headerShown: false }} />
      <Stack.Screen
        name="(authenticated)/crypto/[id]"
        options={{const InitialLayout = () => {
            const [loaded, error] = useFonts({
              SpaceMono: require('../assets/fonts/SpaceMono-Regular.ttf'),
              ...FontAwesome.font,
            });
            const router = useRouter();
            const { isLoaded, isSignedIn } = useAuth();
            const segments = useSegments();
          
            // Expo Router uses Error Boundaries to catch errors in the navigation tree.
            useEffect(() => {
              if (error) throw error;
            }, [error]);
          
            useEffect(() => {
              if (loaded) {
                SplashScreen.hideAsync();
              }
            }, [loaded]);
          
            useEffect(() => {
              if (!isLoaded) return;
          
              const inAuthGroup = segments[0] === '(authenticated)';
          
              if (isSignedIn && !inAuthGroup) {
                router.replace('/(authenticated)/(tabs)/home');
              } else if (!isSignedIn) {
                router.replace('/');
              }
            }, [isSignedIn]);
          
            if (!loaded || !isLoaded) {
              return (
                <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
                  <ActivityIndicator size="large" color={Colors.primary} />
                </View>
              );
            }
          
            return (
              <Stack>
                <Stack.Screen name="index" options={{ headerShown: false }} />
                <Stack.Screen
                  name="signup"
                  options={{
                    title: '',
                    headerBackTitle: '',
                    headerShadowVisible: false,
                    headerStyle: { backgroundColor: Colors.background },
                    headerLeft: () => (
                      <TouchableOpacity onPress={router.back}>
                        <Ionicons name="arrow-back" size={34} color={Colors.dark} />
                      </TouchableOpacity>
                    ),
                  }}
                />
          
                <Stack.Screen
                  name="login"
                  options={{
                    title: '',
                    headerBackTitle: '',
                    headerShadowVisible: false,
                    headerStyle: { backgroundColor: Colors.background },
                    headerLeft: () => (
                      <TouchableOpacity onPress={router.back}>
                        <Ionicons name="arrow-back" size={34} color={Colors.dark} />
                      </TouchableOpacity>
                    ),
                    headerRight: () => (
                      <Link href={'/help'} asChild>
                        <TouchableOpacity>
                          <Ionicons name="help-circle-outline" size={34} color={Colors.dark} />
                        </TouchableOpacity>
                      </Link>
                    ),
                  }}
                />
          
                <Stack.Screen name="help" options={{ title: 'Help', presentation: 'modal' }} />
          
                <Stack.Screen
                  name="verify/[phone]"
                  options={{
                    title: '',
                    headerBackTitle: '',
                    headerShadowVisible: false,
                    headerStyle: { backgroundColor: Colors.background },
                    headerLeft: () => (
                      <TouchableOpacity onPress={router.back}>
                        <Ionicons name="arrow-back" size={34} color={Colors.dark} />
                      </TouchableOpacity>
                    ),
                  }}
                />
                <Stack.Screen name="(authenticated)/(tabs)" options={{ headerShown: false }} />
                <Stack.Screen
                  name="(authenticated)/crypto/[id]"
                  options={{
                    title: '',
                    headerLeft: () => (
                      <TouchableOpacity onPress={router.back}>
                        <Ionicons name="arrow-back" size={34} color={Colors.dark} />
                      </TouchableOpacity>
                    ),
                    headerLargeTitle: true,
                    headerTransparent: true,
                    headerRight: () => (
                      <View style={{ flexDirection: 'row', gap: 10 }}>
                        <TouchableOpacity>
                          <Ionicons name="notifications-outline" color={Colors.dark} size={30} />
                        </TouchableOpacity>
                        <TouchableOpacity>
                          <Ionicons name="star-outline" color={Colors.dark} size={30} />
                        </TouchableOpacity>
                      </View>
                    ),
                  }}
                />
                <Stack.Screen
                  name="(authenticated)/(modals)/lock"
                  options={{ headerShown: false, animation: 'none' }}
                />
                <Stack.Screen
                  name="(authenticated)/(modals)/account"
                  options={{
                    presentation: 'transparentModal',
                    animation: 'fade',
                    title: '',
                    headerTransparent: true,
                    headerLeft: () => (
                      <TouchableOpacity onPress={router.back}>
                        <Ionicons name="close-outline" size={34} color={'#fff'} />
                      </TouchableOpacity>
                    ),
                  }}
                />
              </Stack>
            );
          };
          title: '',
          headerLeft: () => (
            <TouchableOpacity onPress={router.back}>
              <Ionicons name="arrow-back" size={34} color={Colors.dark} />
            </TouchableOpacity>
          ),
          headerLargeTitle: true,
          headerTransparent: true,
          headerRight: () => (
            <View style={{ flexDirection: 'row', gap: 10 }}>
              <TouchableOpacity>
                <Ionicons name="notifications-outline" color={Colors.dark} size={30} />
              </TouchableOpacity>
              <TouchableOpacity>
                <Ionicons name="star-outline" color={Colors.dark} size={30} />
              </TouchableOpacity>
            </View>
          ),
        }}
      />
      <Stack.Screen
        name="(authenticated)/(modals)/lock"
        options={{ headerShown: false, animation: 'none' }}
      />
      <Stack.Screen
        name="(authenticated)/(modals)/account"
        options={{
          presentation: 'transparentModal',
          animation: 'fade',
          title: '',
          headerTransparent: true,
          headerLeft: () => (
            <TouchableOpacity onPress={router.back}>
              <Ionicons name="close-outline" size={34} color={'#fff'} />
            </TouchableOpacity>
          ),
        }}
      />
    </Stack>
  );
};